services:
  nginx:
    build: ./nginx        # <- on build l'image depuis /nginx
    container_name: pong_nginx
    ports:
      - "8081:80"
      - "8443:443"        # ou "443:443" si tu veux le port 443 en direct
    volumes:
      - ./static:/static
      - ./media:/app/media
      - /dev/null:/var/log/nginx/access.log  # Rediriger les logs vers /dev/null
    depends_on:
      - uvicorn
    networks:
      - pong_network

  uvicorn:
    build: .
    container_name: pong_uvicorn
    command: /app/entrypoint.sh
    volumes:
      - .:/app
      - ./media:/app/media
  
    environment:
      - DJANGO_SETTINGS_MODULE=pong_project.settings
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=pong_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    expose:
      - "8000"
    depends_on:
      - db
      - redis
    networks:
      - pong_network

  db:
    image: postgres:15
    container_name: pong_db
    environment:
      POSTGRES_DB: pong_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - pong_network

  redis:
    image: redis:alpine
    container_name: pong_redis
    networks:
      - pong_network

networks:
  pong_network:
    driver: bridge

volumes:
  postgres_data:
# Dockerfile

FROM python:3.10

# Évite les *.pyc
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

WORKDIR /app

# Installe le client Postgres (pour pg_isready du script wait-for-postgres.sh)
RUN apt-get update && apt-get install -y postgresql-client

COPY requirements.txt /app/
RUN pip install --no-cache-dir -r requirements.txt

COPY . /app/

# Collecte des fichiers statiques
RUN python manage.py collectstatic --noinput || true

# Rendre les scripts exécutables
RUN chmod +x /app/entrypoint.sh
RUN chmod +x /app/wait-for-postgres.py

EXPOSE 8000

CMD ["bash", "/app/entrypoint.sh"]
#!/bin/bash
# entrypoint.sh

set -e

echo "==> Waiting for postgreSQL"
python wait-for-postgres.py
echo "==> Applying migrations"
python manage.py makemigrations
python manage.py migrate

echo "==> Collecting static files"
python manage.py collectstatic --noinput

echo "==> Starting Uvicorn ASGI server"
# Utilisez exec pour que le processus Uvicorn remplace le processus shell, ce qui facilite la gestion des signaux et des arrêts propres.
exec uvicorn pong_project.asgi:application --host 0.0.0.0 --port 8000
# Nom du projet (optionnel si tu veux l'utiliser en variable)
PROJECT_NAME = pong_project

# Fichier docker-compose (si besoin d'un chemin particulier)
COMPOSE_FILE = docker-compose.yml

# Par défaut, on peut définir une cible "up"
up:
	docker compose -f $(COMPOSE_FILE) up 

# Stopper et supprimer les conteneurs, réseaux et volumes
down:
	docker compose -f $(COMPOSE_FILE) down

# Stopper et supprimer conteneurs + volumes + orphelins
clean:
	docker compose -f $(COMPOSE_FILE) down --volumes --remove-orphans

# Reconstruire les images
build:
	docker compose -f $(COMPOSE_FILE) build

# Nettoyer davantage (images dangling, etc.)
prune:
	docker system prune --all --force
	docker volume prune --force
	docker network prune --force

# Exemple : tout refaire (clean + build + up)
reset: clean build up
	@echo "Containers and volumes removed, images rebuilt, environment is fresh!"

# Shortcut : on peut remettre "docker compose down" si on veut juste effacer vite
re:
	docker compose -f $(COMPOSE_FILE) down --volumes --remove-orphans
	docker compose -f $(COMPOSE_FILE) up 
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pong_project.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
django-redis==5.2.0

channels==4.0.0
channels-redis==4.0.0
# gunicorn==20.1.0      # Optionnel si tu veux Gunicorn pour la partie HTTP "classique"
redis==4.5.5  
uvicorn[standard]>=0.23.0
psycopg2==2.9.6

# FT transcendence
Django>=4.0,<5.0
# psycopg2-binary
python-dotenv
bcrypt
Pillow
pyotp
PyJWT==2.8.0
qrcode
djangorestframework-simplejwt
django-widget-tweaks